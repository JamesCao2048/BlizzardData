Accessibility: ROLE_TABLE does not work correctly on GTK
Returning a role of ACC.ROLE_TABLE[*] in Accessible.getRole() currently confuses GTK's gnopernicus, and as a result it does not speak the name strings of table headers or cells.
Until this bug is fixed, a workaround for this is to return ACC.ROLE_LIST for the table, and ACC.ROLE_LISTITEM for the table cells when SWT is running on GTK.
Here is an example snippet that shows this workaround (see the getRole method):
import org.eclipse.swt.*;
import org.eclipse.swt.widgets.*;
import org.eclipse.swt.accessibility.*;
import org.eclipse.swt.layout.*;
import org.eclipse.swt.graphics.*;
public class AccessibleCustomTable {
public static void main(String[] args) {
Display display = new Display();
Shell shell = new Shell(display, SWT.SHELL_TRIM);
shell.setLayout(new GridLayout());
CustomTable table = new CustomTable(shell, SWT.BORDER);
table.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));
table.setColumnCount(3);
table.setRowCount(5);
for (int row = 0; row
< table.getRowCount(); row++) {
for (int col = 0; col
< table.getColumnCount(); col++) {
CustomTableCell cell = new CustomTableCell(table, SWT.NONE);
cell.setText("cell " + col + "/" + row);
}
}
Button button = new Button(shell, SWT.PUSH);
button.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));
button.setText("Sibling control for testing focus changes");
table.setFocus();
shell.open();
while (!shell.isDisposed()) {
if (!display.readAndDispatch()) display.sleep();
}
display.dispose();
}
static class CustomTableCell {
String text;
Rectangle bounds;

public CustomTableCell(Composite parent, int style) {
((CustomTable)parent).addCell(this);
}

public void setText(String text) {
this.text = text;
}

public String getText() {
return text;
}
public Rectangle getBounds() {
return bounds;
}
}

static class CustomTable extends Composite {
CustomTableCell cells[] = new CustomTableCell[0];
int columnCount, rowCount;
int focusIndex = 0;

public CustomTable(Composite parent, int style) {
super(parent, style);
initAccessible();
int[] events = new int[]{
SWT.FocusIn,
SWT.FocusOut,
SWT.KeyDown,
SWT.MouseDown,
SWT.Paint,
SWT.Resize,
SWT.Traverse,
};
for (int i = 0; i
< events.length; i++) {
addListener(events[i], new Listener() {
public void handleEvent(Event event) {
switch (event.type) {
case SWT.FocusIn:          onFocus(event);	break;
case SWT.FocusOut:         onFocus(event);	break;
case SWT.KeyDown:          onKeyDown(event); break;
case SWT.MouseDown:        onMouseDown(event);	break;
case SWT.Paint:            onPaint(event);	break;
case SWT.Resize:           onResize(event);	break;
case SWT.Traverse:         onTraverse(event); break;
}
}
});
}
}
public void setColumnCount(int columnCount) {
this.columnCount = columnCount;
}
public int getCo