Embedded image render error in StyledText
Run below snippet, and you can find that the second embedded image can't be seen.
public class Snippet {

static StyledText styledText;
static String text = "Embedded Image: u0014u0014, The second image can't be seen";
static Image[] images;
static int[] offsets;
static void addImage(Image image, int offset) {
StyleRange style = new StyleRange ();
style.start = offset;
style.length = 1;
Rectangle rect = image.getBounds();
style.metrics = new GlyphMetrics(rect.height, 0, rect.width);
styledText.setStyleRange(style);
}

public static void main(String [] args) {
final Display display = new Display();
final Shell shell = new Shell(display);
shell.setLayout(new GridLayout());
styledText = new StyledText(shell, SWT.WRAP | SWT.BORDER);
styledText.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));
styledText.setText(text);
images = new Image[] {
display.getSystemImage(SWT.ICON_QUESTION),
display.getSystemImage(SWT.ICON_INFORMATION),
};
offsets = new int[images.length];
int lastOffset = 0;
for (int i = 0; i < images.length; i++) {
int offset = text.indexOf("u0014", lastOffset);
offsets[i] = offset;
addImage(images[i], offset);
lastOffset = offset + 1;
}

// use a verify listener to keep the offsets up to date
styledText.addVerifyListener(new VerifyListener()  {
public void verifyText(VerifyEvent e) {
int start = e.start;
int replaceCharCount = e.end - e.start;
int newCharCount = e.text.length();
for (int i = 0; i < offsets.length; i++) {
int offset = offsets[i];
if (start <= offset && offset < start + replaceCharCount) {
// this image is being deleted from the text
if (images[i] != null && !images[i].isDisposed()) {
images[i].dispose();
images[i] = null;
}
offset = -1;
}
if (offset != -1 && offset >= start) offset += newCharCount - replaceCharCount;
offsets[i] = offset;
}
}
});
styledText.addPaintObjectListener(new PaintObjectListener() {
public void paintObject(PaintObjectEvent event) {
GC gc = event.gc;
StyleRange style = event.style;
int start = style.start;
for (int i = 0; i < offsets.length; i++) {
int offset = offsets[i];
if (start == offset) {
Image image = images[i];
int x = event.x;
int y = event.y + event.ascent - style.metrics.ascent;
gc.drawImage(image, x, y);
}
}
}
});

shell.setSize(400, 400);
shell.open();
while (!shell.isDisposed()) {
if (!display.readAndDispatch())
display.sleep();
}
for (int i = 0; i < images.length; i++) {
Image image = images[i];
if (image != null && !image.isDisposed()) {
image.dispose();
}
}
display.dispose();
}
}