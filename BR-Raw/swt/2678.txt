Crash in TreeSelection - Event
The following code generates an run-time error as below:
# Java VM: Java HotSpot(TM) Client VM (1.5.0_03-b07 mixed mode, sharing)
# Problematic frame:
# C  [libgtk-x11-2.0.so.0+0x169e97]
#
# An error report file with more information is saved as hs_err_pid26997.log
#
# If you would like to submit a bug report, please visit:
#    http://java.sun.com/webapps/bugreport/crash.jsp
#

Action to do: expand/collapse root-item 0.This happens only if you use the
branch indicator (left).
This cause the TreeSelection Events will be fired.

===== Here starts the code ================
// based on an example from "the def.
guide to swt and jface"
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.TreeAdapter;
import org.eclipse.swt.events.TreeEvent;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Tree;
import org.eclipse.swt.widgets.TreeItem;

import com.swtdesigner.SWTResourceManager;

import de.datex.swt.controls.OutlookBar;

/**
* Displays a single-selection tree, a multi-selection tree, and a checkbox
tree
*/
public class TreeExample {
/**
* Runs the application
*/
public void run() {
Display display = new Display();
Shell shell = new Shell(display);
shell.setText("TreeExample");
createContents(shell);
shell.open();
while (!shell.isDisposed()) {
if (!display.readAndDispatch()) {
display.sleep();
}
}
display.dispose();
}

private void createContents(Composite composite) {
// Set the single-selection tree in the upper left,
// the multi-selection tree in the upper right,
// and the checkbox tree across the bottom.
// To do this, create a 1x2 grid, and in the top
// cell, a 2x1 grid.
composite.setLayout(new GridLayout(1, true));
Composite top = new Composite(composite, SWT.NONE);
GridData data = new GridData(GridData.FILL_BOTH);
top.setLayoutData(data);

top.setLayout(new GridLayout(1, true));
Tree single = new Tree(top, SWT.SINGLE | SWT.BORDER);
data = new GridData(GridData.FILL_BOTH);
single.setLayoutData(data);
fillTree(single);
}

private void collapseCurrentSelection(TreeItem item) {
TreeItem parentItem = item.getParentItem();
if (parentItem != null) {
// no root item
for(TreeItem childItem: parentItem.getItems()) {
if (childItem != item && childItem.getExpanded() ==
true) {
childItem.setExpanded(false);
// found item currently expanded on the same
sub tree =>
// no other root item has been selected.
return;
}
}
}
else {
Tree tree = item.getParent();
for (TreeItem rootItem: tree.getItems()) {
