Bug 197282 – org.eclipse.jdt.debug.test.stepping.ForceReturnTests depend on VM-specific behaviour.
Build ID: I20070621-1340
Steps To Reproduce:
The tests in org.eclipse.jdt.debug.test.stepping.ForceReturnTests fail when running with JRockit R27.3.1.
The tests incorrectly assume that a STEPEVENT cannot be co-located in the same event set together with the SUSPEND event from a breakpoint set at the same line.
For example:
public void testForceIntReturnTopFrame() throws Exception {
String typeName = "ForceReturnTests";
ILineBreakpoint bp2 = createLineBreakpoint(22, typeName);
ILineBreakpoint bp = createLineBreakpoint(31, typeName);
IJavaThread thread = null;
try {
thread= launchToLineBreakpoint(typeName, bp, false);
IJavaStackFrame stackFrame = (IJavaStackFrame) thread.getTopStackFrame();
IJavaDebugTarget target = (IJavaDebugTarget) stackFrame.getDebugTarget();
if (target.supportsForceReturn()) {
assertTrue("Force return should be enabled", stackFrame.canForceReturn());
DebugElementEventWaiter waiter = new DebugElementEventWaiter(DebugEvent.SUSPEND, thread);
stackFrame.forceReturn(target.newValue(42));
Object source = waiter.waitForEvent();
assertTrue("Suspend should be from thread", source instanceof IJavaThread);
thread = (IJavaThread) source;
thread = resumeToLineBreakpoint(thread, bp2);
stackFrame = (IJavaStackFrame) thread.getTopStackFrame();
IJavaVariable var = stackFrame.findVariable("x");
assertNotNull("Missing variable 'x'", var);
assertEquals("Return value incorrect", target.newValue(42), var.getValue());
}
} finally {
terminateAndRemove(thread);
removeAllBreakpoints();
}
}
Note how the test does a:
stackFrame.forceReturn(target.newValue(42));
Object source = waiter.waitForEvent();
This does indeed both force a return and it does wait for the 'suspend' issued by the step_return.
It does however miss the one from the breakpoint, which is in same event set and also queued a (eclipse internal) SUSPEND event.
After that the test waits for the breakpoint, but since that one has already been reported it will be forever lost.
Note that debugging with forceearly in Eclipse with JRockit works fine.
This is just a test error.
This bug maps to JRockit CR332215.
More information: