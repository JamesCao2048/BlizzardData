LazyMethodGen.remap() NullPointerException
This has been reported a few times by different users, but has always proved tough to diagnose.  The typical stack trace is something like:
java.lang.NullPointerException
org.aspectj.weaver.bcel.LazyMethodGen.remap(LazyMethodGen.java:1237)
org.aspectj.weaver.bcel.LazyMethodGen.addExceptionHandlers(LazyMethodGen.java:1132)
org.aspectj.weaver.bcel.LazyMethodGen.packBody(LazyMethodGen.java:1078)
org.aspectj.weaver.bcel.LazyMethodGen.pack(LazyMethodGen.java:977)
org.aspectj.weaver.bcel.LazyMethodGen.getMethod(LazyMethodGen.java:484)
org.aspectj.weaver.bcel.LazyClassGen.writeBack(LazyClassGen.java:512)
org.aspectj.weaver.bcel.LazyClassGen.getJavaClassBytesIncludingReweavable(LazyClassGen.java:652)
org.aspectj.weaver.bcel.BcelWeaver.getClassFilesFor(BcelWeaver.java:1420)
org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1390)
And that is an exception on this line in remap()
ih = ih.getNext();
called from the addExceptionHandlers() line:
gen.addExceptionHandler(
remap(r.getRealStart(), map),
remap(r.getRealEnd(), map),
remap(r.getHandler(), map),
(r.getCatchType() == null)
? null
: (ObjectType) BcelWorld.makeBcelType(r.getCatchType()));
During weaving, an instruction list is augmented with extra entries representing where shadows start and end (method-call, method-execution, handler, etc).  When weaving is complete we want to remove these temporary elements and use the remaining instructions to produce the method bytecode.  Now sometimes these temporary entries are targeted by other elements (line number tags, local variable tags and exception handlers usually).  During packing we use remap() to reposition the locations so they move off of temporary placeholders and onto real instructions that will make it out into the bytecode.  What the above exception tells us is that we started walking over temporary placeholder entries, but before we came to a real instruction, we ran out of instructions!  This cannot happen, and indicates something went seriously wrong, we should always encounter an instruction when remapping off a temporary element.
After some digging it is actually the remap() call for the handler (not the start or end) that leads to the problem.  The handler represents where to jump to in the code when an exception of the specified type occurs between the instructions pointed at by start and end.
I sent a debug build to a user encountering this problem (I could not recreate it) and in that I was looking at where in fact the handler was pointing before we called remap().  I learned that when this problem occurs, the handler is not pointing to anywhere in the method currently being processed (not good).
In a second debug build I tried to ascertain who was setting these handlers to point to nowhere.  This debug never triggered, no-one was setting them to point to nowhere...
I happened to notice whilst going through the instr