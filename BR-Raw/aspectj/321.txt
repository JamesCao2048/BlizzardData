ClassFormatException with tracing aspect
Build id: 20051017111807
AspectJ version: 1.5.0.200510141300
The following aspect resulted in the CFE:
public aspect CallTrace {
/**
* A marker interface used to pick the classes to trace. Declare any class you
want to
* trace to implement this interface. The best way is using an aspect like the
one in
* the class comment block above.
*/
public static interface Traced {}

/**
* A marker annoation, can be used instead of {@link Traced}.
*/
@Documented
@Retention(RetentionPolicy.RUNTIME)
@Target({ElementType.TYPE, ElementType.ANNOTATION_TYPE})
public @interface TracedAnno {}

private static Level level = Level.INFO;

/**
* Set the global logging level used for reporting traced calls. Defaults to INFO.
* @param newLevel
*/
public static void setLevel (Level newLevel) {
level = newLevel;
}

/**
* @return the Level used for writing traced output.
*/
public static Level getLevel () {
return level;
}

private static Logger log = Logger.getLogger(Traced.class);
private int nesting = 0;
private static StringBuffer prefixStr = null;
static {
new StringBuffer(1024);
for (int i=0; i<128; i++) { // stuff with "+".
prefixStr.append("++++++++");
}
}
public pointcut exclusions(): within(CallTrace) || within(*Tracer);

// Distinguish between initialization JPs and other method calls, to work
// around AJ limitation that around advice isn't supported for initializations.

public pointcut traceIntfInit(): initialization(Traced+.new(..));
public pointcut traceIntf(): call(* Traced+.*(..));

public pointcut traceAnnoInit():
initialization(com.adteractive..*.new(..)) && @target(TracedAnno);
public pointcut traceAnno():
call(* com.adteractive..*.*(..)) && @target(TracedAnno);
public pointcut traceInit(): !exclusions() && (traceIntfInit() || traceAnnoInit());
public pointcut trace(): !exclusions() && (traceIntf() || traceAnno());

before(): traceInit() {
nesting++;
String pre = prefixStr.substring(0,nesting);
log.log (level, pre+"> "+thisJoinPointStaticPart);
}

after(): traceInit() {
String pre = prefixStr.substring(0,nesting);
log.log (level, pre+"< "+thisJoinPointStaticPart);
nesting--;
}

Object around(): trace() {
nesting++;
String pre = prefixStr.substring(0,nesting);
log.log (level, pre+"> "+thisJoinPointStaticPart);
Object result = proceed();
log.log (level, pre+"< "+thisJoinPointStaticPart);
nesting--;
return result;
}
}
A separate aspect is used to "declare parent" or "declare @type" either the
marker interface or annotation, thereby adding tracing to the user-specified
classes. E.g.,
public aspect CallTraceTestTracer {
//	declare @type:   com.me.foo..*: @CallTrace.TracedAnno;
declare parents: com.me.foo..* implements CallTrace.Traced;
}
The exception wasn't thrown in a previous version when I used just before advice
for both the "trace" and "traceInit" pointcuts.
org.aspectj.apache.bcel.classfile.ClassFormatException
at org.aspectj.apache