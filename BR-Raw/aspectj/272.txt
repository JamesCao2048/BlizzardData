[generics] mixing and matching numbers of type variables/parameters in a hierarchy
Hi guys!
I didn't talk to you for a while, but I've found several new issues related to generics. Here is the first and the most annoying one:
1) Just compile the testcase with iajc and you will get "java.lang.IllegalStateException: Wrong number of type parameters supplied"
Java Code:
=========
public interface Generic1<T extends Number> {
public void foo(T p);
}
public interface Generic2<T extends Number, Y extends Number> extends Generic1<T> {
public void foo2(Y p);
}
public class Test<Y extends Number> implements Generic2<Y,Y>{
public void foo2(Y p) {
}
public void foo(Y p) {
}
}
Aspect:
=======
public privileged aspect TestAspect {
pointcut TestInheritance(Test test) : target(test) && execution (* com.mprv.secsph.Generic1.*(..));
after (Test test) : TestInheritance(test) {
System.out.println("GO Aspects!");
}
}
Exception:
==========
iajc
abort trouble in:
public class com.mprv.secsph.Test extends java.lang.Object implements com.mprv.secsph.Generic2:
public void <init>():
ALOAD_0     // com.mprv.secsph.Test this   (line 10)
INVOKESPECIAL java.lang.Object.<init> ()V
constructor-execution(void com.mprv.secsph.Test.<init>())
|               RETURN
constructor-execution(void com.mprv.secsph.Test.<init>())
end public void <init>()
public void foo2(Number)    org.aspectj.weaver.MethodDeclarationLineNumber: 11:259
:
RETURN   (line 12)
end public void foo2(Number)
public void foo(Number)    org.aspectj.weaver.MethodDeclarationLineNumber: 13:287
:
RETURN   (line 14)
end public void foo(Number)
end public class com.mprv.secsph.Test
-- (IllegalStateException) Wrong number of type parameters supplied
Wrong number of type parameters supplied
java.lang.IllegalStateException: Wrong number of type parameters supplied
at org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith(ResolvedMemberImpl.java:609)
at org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith(ResolvedMemberImpl.java:590)
at org.aspectj.weaver.ReferenceType.getDeclaredMethods(ReferenceType.java:472)
at org.aspectj.weaver.ResolvedType.addAndRecurse(ResolvedType.java:262)
at org.aspectj.weaver.ResolvedType.addAndRecurse(ResolvedType.java:301)
at org.aspectj.weaver.ResolvedType.getMethodsWithoutIterator(ResolvedType.java:257)
at org.aspectj.weaver.ResolvedType.lookupResolvedMember(ResolvedType.java:375)
at org.aspectj.weaver.JoinPointSignatureIterator.findSignaturesFromSupertypes(JoinPointSignatureIterator.java:177)
at org.aspectj.weaver.JoinPointSignatureIterator.hasNext(JoinPointSignatureIterator.java:68)
at org.aspectj.weaver.patterns.SignaturePattern.matches(SignaturePattern.java:286)
at org.aspectj.weaver.patterns.KindedPointcut.matchInternal(KindedPointcut.java:106)
at org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:145)
at org.aspectj.weaver.patterns.AndPointcut.matchInternal(AndPointcut.java:55)
at org.aspectj.weaver.patterns.Pointcut