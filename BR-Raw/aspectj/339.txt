Compiler Core Dump with Apparent Fix
I am seeing this exception when using ajc to do binary weaving:
[iajc] Exception thrown from AspectJ 1.5.0M4
[iajc] This might be logged as a bug already -- find current bugs at
[iajc]    http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&component
=Compiler
[iajc] Bugs for exceptions thrown have titles File:line from the top stack,
[iajc] e.g., "SomeFile.java:243"
[iajc] If you don't find the exception below in a bug, please add a new bug
[iajc] at  http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ
[iajc] To make the bug a priority, please include a test program
[iajc] that can reproduce this exception.
[iajc] org.aspectj.weaver.MissingResolvedTypeWithKnownSignature
[iajc] when batch building with classpath: ...
[iajc] org.aspectj.weaver.MissingResolvedTypeWithKnownSignature
[iajc] java.lang.ClassCastException: org.aspectj.weaver.MissingResolvedType
WithKnownSignature
[iajc]     at org.aspectj.weaver.bcel.BcelWorld.addSourceObjectType(BcelWor
ld.java:277)
[iajc]     at org.aspectj.weaver.bcel.BcelWeaver.addClassFile(BcelWeaver.ja
va:373)
[iajc]     at org.aspectj.weaver.bcel.BcelWeaver.addJarFile(BcelWeaver.java
:306)
[iajc]     at org.aspectj.ajdt.internal.core.builder.AjBuildManager.initBce
lWorld(AjBuildManager.java:598)
[iajc]     at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild
(AjBuildManager.java:204)
[iajc]     at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBu
ild(AjBuildManager.java:151)
[iajc]     at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:1
12)
[iajc]     at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:
60)
[iajc]     at org.aspectj.tools.ajc.Main.run(Main.java:326)
[iajc]     at org.aspectj.tools.ajc.Main.runMain(Main.java:240)
[iajc]     at org.aspectj.tools.ajc.Main.main(Main.java:83)
[iajc] 1 fail|abort
I see this also in HEAD and used the debugger to determine it is trying to
resolve the type that it's trying to load!
I am able to get it to finish the weave with no errors by changing BcelWorld as
follows:
public BcelObjectType addSourceObjectType(JavaClass jc) {
BcelObjectType ret = null;
String signature = UnresolvedType.forName(jc.getClassName
()).getSignature();
ReferenceType nameTypeX = null;
Object lookup = typeMap.get(signature);
if (lookup instanceof ReferenceType) {
nameTypeX = (ReferenceType)lookup;
}
Instead of just casting. Then the result is null and it falls through to the
usual lookup unresolved type logic. Is this fix correct?
I suspect it would take a few hours to narrow down a test case for this one.