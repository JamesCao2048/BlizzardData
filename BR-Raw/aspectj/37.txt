Performance regression in 1.6.12
Build Identifier: 1.6.12
The application I'm working on takes 152 seconds to start under the 1.6.11 LTW agent, but takes 37 *minutes* to start under the 1.6.12 LTW agent.  Profiling it under the 1.6.12 LTW agent shows the extra time is spent in ReferenceType.addDependentType() (being called from TypeFactory.createParameterizedType()).  Under a debugger, I can see that the ReferenceType.derivativeTypes HashSet is getting very very big (because ResolvedType.equals() falls back to ==, so there are lots of 'duplicates' in the HashSet), which is causing each successive add() to get slower and slower.  It looks like derivativeTypes was changed from ArrayList to HashSet in 1.6.12 (as part of the changeset for  bug 344005 ), which seems to be what caused the performance regression.  Changing derivativeTypes back to ArrayList solves the issue and brings startup times back in line with 1.6.11.  I'm not sure if this is the best fix though, I started thinking about storing parameterized types in World.typeMap to remove duplicate instances globally and/or changing ResolvedType.equals() to remove duplicate instances inside of derivativeTypes, but quickly got in over my head.
Reproducible: Always