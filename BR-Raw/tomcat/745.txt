[doc] repackage IPlatformRunnable
Yes.
This makes good sense and appears to work out well.
=============== Before: package org.eclipse.core.boot; public interface IPlatformRunnable { public static final Integer EXIT_OK = new Integer(0); publ
ic static final Integer EXIT_RESTART = new Integer(23); public Object run(Object args) throws Exception; } =============== After: package org.eclipse.
core.runtime; public interface IPlatformRunnable { public static final Integer EXIT_OK = new Integer(0); public static final Integer EXIT_RESTART = ne
w Integer(23); public Object run(Object args) throws Exception; } package org.eclipse.core.boot; /** @deprecated Use org.eclipse.core.runtime.IPlatfor
mRunnable instead.
*/ public interface IPlatformRunnable extends org.eclipse.core.runtime.IPlatformRunnable { } ============== IPlatformRunnable is interface that plug-i
ns implement in conjunction with org.eclipse.core.runtime.applications extension point.
e.g., MyApp implements org.eclipse.core.boot.IPlatformRunnable {...} Net effect of API changes in null.
Preserves binary compatibility.
Doc for extension point would need to change.
Extension point would need to handle old and new.
Existing classes would implement org.eclipse.core.boot.IPlatformRunnable; some classes implement org.eclipse.core.runtime.IPlatformRunnable.
Given relation between the two, there is no problem.
Code does not need to special case which.
============= Other places in eclipse API where org.eclipse.core.boot.IPlatformRunnable is mentioned.
None.