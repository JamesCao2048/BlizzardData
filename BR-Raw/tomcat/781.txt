Allow apps to specify multiple Shell image icons for different resolutions
Native windows apps can set both a small and large system icon for their
windows (Shells), but SWT (Win32) only allows setting the small
icon "decorations.setImage(Image)".  The small icon (generally 16x16) is used
on the window decoration and the large (generally 32x32) is used for the Alt-
Tab task switcher.  Without being able to specify the large icon, the OS is
forced to scale the small icon producing a ragged looking image (the Eclipse
icon looks fairly rough in the Alt-Tab window).  Other OSs may have similar
functionality that this enhancement may benefit, so this is probably not a
Win32 specific problem.  SWT developers are currently forced to chose 1 size
Shell icon to work for all platform specific purposes.
I am recommending the following additions to the Decorations class API.
Included is a potential Win32 implementation.  Implementations of other OSs
should be fairly similar and trivial.  This includes the addition of a new
ImageProvider interface which allows the application an opportunity to provide
the correct size image based on the platform requirements.
public class Decorations extends Canvas {
...
Image lgImage;
static final int DEFAULT_SMALL_ICON_SIZE = 16;
static final int DEFAULT_LARGE_ICON_SIZE = 32;
public void setImages(ImageProvider imageProvider) {
if (imageProvider == null) error(SWT.ERROR_INVALID_ARGUMENT);
// Set the small system icon
int smIconSize = OS.GetSystemMetrics(OS.SM_CXSMICON);
if (smIconSize <= 0) {
smIconSize = DEFAULT_SMALL_ICON_SIZE;
}
Image smIcon = imageProvider.getImage(display, SWT.ICON, smIconSize,
smIconSize, -1);
int hSmIcon = 0;
if (smIcon != null) {
if (smIcon.isDisposed() || smIcon.type != SWT.ICON) {
error(SWT.ERROR_INVALID_IMAGE);
}
hSmIcon = smIcon.handle;
}
OS.SendMessage(handle, OS.WM_SETICON, OS.ICON_SMALL, hSmIcon);
this.image = smIcon;
// Set the large system icon
int lgIconSize = OS.GetSystemMetrics(OS.SM_CXICON);
if (lgIconSize <= 0) {
lgIconSize = DEFAULT_LARGE_ICON_SIZE;
}
Image lgIcon = imageProvider.getImage(display, SWT.ICON, lgIconSize,
lgIconSize, -1);
int hLgIcon = 0;
if (lgIcon != null) {
if (lgIcon.isDisposed() || lgIcon.type != SWT.ICON) {
error(SWT.ERROR_INVALID_IMAGE);
}
hLgIcon = lgIcon.handle;
}
OS.SendMessage(handle, OS.WM_SETICON, OS.ICON_BIG, hLgIcon);
this.lgImage = lgIcon;
}
public Image[] getImages() {
Image[] images;
if (this.image != null && this.lgImage != null) {
images = new Image[] { this.image, this.lgImage };
} else if (this.image != null) {
images = new Image[] { this.image };
} else if (this.lgImage != null) {
images = new Image[] { this.lgImage };
} else {
images = new Image[0];
}
return images;
}
...
}
public interface ImageProvider
{
/** This interface should potentially allow a -1 for each of the int
parameters to specify "any".  This is probably most useful for the
depth parameter.  */
Image getImage(Device device, int type, int width, int height, int depth);
}