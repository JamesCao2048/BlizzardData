Problem with name collision in XML-schema generated models(?)
I have a fairly large XML schema (142 Classes, 133 DataTypes, 30 Enums, 549 Features, 1 Package) that I used to generate an EMF model (EMF 2.0.0_20031
219 though I have the same problem with 2.0.0_20040127).
I'm using this schema to send and receive SOAP messages, and for most of my messages this works fine.
Unfortunately, for one type of message I'm seeing a strange exception thrown when I try to parse a particular XML document.
The failing XML is small, and correct by the schema: 
<sch:LocationList xmlns:sch=" http://coalition/xml/schema "> 
<sch:Location locationId="271095"> 
<sch:Name>Brisbane Australia</sch:Name> 
<sch:Code codeType="GEOLOC"> 
<sch:Parameter parmName="GEOLOC">CKKJ</sch:Parameter> 
</sch:Code> 
</sch:Location> 
</sch:LocationList> Whereas this XML works fine: 
<sch:LocationList xmlns:sch=" http://coalition/xml/schema "> 
<sch:Location locationId="271095"> 
<sch:Name>Brisbane Australia</sch:Name> 
</sch:Location> 
</sch:LocationList> The problem appears to revolve around the name collision avoidance mechanism that EMF is using to deal with similarly named elemen
ts of different types.
If the BaseEquipT type is removed from the schema, and everything rebuilt, the problem goes away.
Unfortunately, I don't have the luxury of renaming the conflicting schema elements.
The exception that gets thrown is: java.lang.ArrayStoreException at org.eclipse.emf.common.util.BasicEList.assign(BasicEList.java:190) at org.eclipse.
emf.common.util.BasicEList.addUnique(BasicEList.java:606) at org.eclipse.emf.common.notify.impl.NotifyingListImpl.addUnique(NotifyingListImpl.java:299
) at org.eclipse.emf.ecore.xmi.impl.XMLHelperImpl.setValue(XMLHelperImpl.java:748) at org.eclipse.emf.ecore.xmi.impl.XMLHandler.setFeatureValue(XMLHan
dler.java:1448) at org.eclipse.emf.ecore.xmi.impl.XMLHandler.setFeatureValue(XMLHandler.java:1438) at org.eclipse.emf.ecore.xmi.impl.XMLHandler.create
ObjectFromFeatureType(XMLHandler.java:1176) at org.eclipse.emf.ecore.xmi.impl.XMLHandler.createObject(XMLHandler.java:1086) at org.eclipse.emf.ecore.x
mi.impl.XMLHandler.handleFeature(XMLHandler.java:952) at org.eclipse.emf.ecore.xmi.impl.XMLHandler.processElement(XMLHandler.java:403) at org.eclipse.
emf.ecore.xmi.impl.XMLHandler.startElement(XMLHandler.java:386) at org.eclipse.emf.ecore.xmi.impl.SAXWrapper.startElement(SAXWrapper.java:78) at org.a
pache.crimson.parser.Parser2.maybeElement(Parser2.java:1637) at org.apache.crimson.parser.Parser2.content(Parser2.java:1926) at org.apache.crimson.par
ser.Parser2.maybeElement(Parser2.java:1654) at org.apache.crimson.parser.Parser2.content(Parser2.java:1926) at org.apache.crimson.parser.Parser2.maybe
Element(Parser2.java:1654) at org.apache.crimson.parser.Parser2.parseInternal(Parser2.java:634) at org.apache.crimson.parser.Parser2.parse(Parser2.jav
a:333) at org.apache.crimson.parser.XMLReaderImpl.parse(XMLReaderImpl.java:448) at javax.xml.parsers.SAXParser.parse(SAXParser.java:345) at org.eclips
e.emf.ecore.xmi.impl.XMLLoadImpl.load(XMLLoadImpl.java:89) at org.eclipse.emf.ecore.xmi.impl.XMLResourceImpl.doLoad(XMLResourceImpl.java:141) at org.e
clipse.emf.ecore.resource.impl.ResourceImpl.load(ResourceImpl.java:879) at t2.test.Test2.main(Test2.java:42) I've attached the relevant subset of the 
schema (the full schema is proprietary and huge), the program that exposes the problem, as well as the genmodel and ecore files.