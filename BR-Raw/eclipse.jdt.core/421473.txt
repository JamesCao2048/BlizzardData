Bug 421473 – [1.8][compiler] Delayed assignment of declaring scope for arguments creates a race condition.
BETA_JAVA8:
Staring at LocalVariableBinding.getAnnotations(), I see that there is a potential
race condition there: The setting of declaringScope happens far away from the
creation of LVB and if there are calls in between to getAnnotations(), we can't
retrieve it from the annotation holder since this requires a handle to enclosing
source type which is obtainable only from a scope.
To circumvent this, there is a block of code in this method that manufactures
an array of annotation bindings and returns it without going to the holder.
However, this is problematic since with Java 8 some of the annotations could
actually be type annotations which should be detached from the parameters.
This block of code itself cannot filter the type annotations because there are
clients that need to see all the annotations to transfer the type annotations
to type.
I think the solution is to set the declaring scope eagerly.
At least for arguments,
I don't know what side effects ensue for doing this for all locals.
Patch will follow shortly.