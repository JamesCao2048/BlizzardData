Bug 487781 – [1.8][null] bogus error only in editor when referenced type has type annotations only on type parameter
DESCRIPTION:
Given the following code, two errors are shown in the class Usage, but only in the editor, not in the problems view:
============== Util.java
package test;
import org.eclipse.jdt.annotation.NonNullByDefault;
import org.eclipse.jdt.annotation.Nullable;
class A<T> {}
interface I {}
@NonNullByDefault
class Util2<T extends @Nullable I> {}
@NonNullByDefault
public class Util {
public static <T extends @Nullable I> void uniqueMapOfUniqueable(A<T> set) {
}
}
============== Usage.java
package test;
import org.eclipse.jdt.annotation.Nullable;
public class Usage {
public void f() {
Util.uniqueMapOfUniqueable(new A<@Nullable I>());
new Util2<@Nullable I>();
}
}
----------\n
1.
ERROR in /BugXXX/src/test/Usage.java (at line 5)\n
Util.uniqueMapOfUniqueable(new A<@Nullable I>());\n
^^^^^^^^^^^^^^^^^^^^\n
Null type mismatch (type annotations): required '@NonNull A<@NonNull I>' but this expression has type 'A<@Nullable I>'\n
----------\n
2.
ERROR in /BugXXX/src/test/Usage.java (at line 6)\n
new Util2<@Nullable I>();\n
^^^^^^^^^^^\n
Null constraint mismatch: The type '@Nullable I' is not a valid substitute for the type parameter 'T extends @NonNull I'\n
----------\n
ANALYSIS:
The type annotations in Util.java are not returned by SourceTypeConverter, because they only appear on type parameters.
Therefore the @NonNullByDefault is applied to the type bounds and the errors are reported.
PATCH(via gerrit:)
Extends the changes for BugÂ 405843 to type parameters