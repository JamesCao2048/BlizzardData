Bug 425153 – [1.8] Having wildcard allows incompatible types in a lambda expression
The following code should not be allowed, but ECJ compiles it:
class C1 {}
class C2 {}
interface I<P1 extends C1, P2 extends P1> {
P2 foo(P1 p1);
}
public class Main  {
public static void main(String argv[]) {
I<?, ?> i = (C1 c1) -> { return new C2(); };
Object c2 = i.foo(null);
}
}
Note that C1 and C2 have no relationship and hence C2 can't be returned for P2 (which effectively extends C1).
As you would expect, this throws up "java.lang.VerifyError: Bad return type" when the program is run.