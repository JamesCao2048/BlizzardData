Bug 417295 – [1.8[[null] Massage type annotated null analysis to gel well with deep encoded type bindings.
BETA_JAVA8:
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&id=3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd released on behalf of
https://bugs.eclipse.org/bugs/show_bug.cgi?id=417113 needs some tweaking/massaging
in the type annotated null analysis support.
These were captured during review
of the mentioned patch and the present CR is being opened to track such tasks.
From bug 409586 comment 65:
(1) NTAT#testBinary05 demonstrates that resetting contradictory nullTagBits is currently broken.
Subsequently the non-null value is detected as not conforming to '@NonNull @Nullable Object'.
(2) ArrayBinding.nullAnnotatedReadableName(CompilerOptions, boolean) must use nullAnnotatedReadableName(..) also for its #leafComponentType, tests will need adjustments after that.
(3) FlowAnalysisTest8#testLambda_04 is now expecting one more error, which should be reverted.
Should be a simple matter of clearing bogus nullAnnotationTagBits.
(4) Error messages in testBug416175()
1.: mixing short and long names
2.: I like "required \'@NonNull ? extends String\'" better than "required \'@NonNull capture#\'" when it's clear we're not interested in compatibility of the capture itself, only in null safety.
(5) STB#resolveTypeFor(FieldBinding): Invoking copySE8AnnotationsToType before field.fillInDefaultNonNullness is problematic because we'll use field.tagBits instead of field.type.tagBits!
'Accidentally' this is partly fixed by VariableBinding.isNonNull() where we check both tagBits locations.
But bug shows when assigning null to such field:
@NonNullByDefault class AllAreNonNull {
String s3 = ""; // leaving this uninitialized would be detected
void test() {
this.s3 = null; // this goes unnoticed!!!
}
}
Note that the corresponding method resolveTypesFor(MethodBinding) does not have this issue, because INAV.checkImplicitNullAnnotations already distinguishes 1.7- vs.
1.8+
(6) MethodBinding#fillInDefaultNonNullness18 is currently broken.
The following two simple changes seem to fix the respective TODOs:
this.parameters[i] = env.createAnnotatedType(parameter, new AnnotationBinding[]{env.getNonNullAnnotation()});
this.returnType = env.createAnnotatedType(this.returnType, new AnnotationBinding[]{env.getNonNullAnnotation()});
Seeing these as marked TODO could indicate there's more to this??
[No, I didn't know env.getNonNullAnnotation() was available]
(7) BinaryTB#scanFieldForNullAnnotation had an initial stanza which served two purposes for the 1.8+ case:
- apply a @NonNullByDefault to the field's type binding
- shortcut everything else that is needed only for 1.7-
Frankly, I don't understand this change.
The first aspect may partly be covered by VariableBinding#isNonNull() which checks tagBits at the FieldBinding AND at its type, but this is probably not sufficient/safe.
[Sorry, I may have been guilty of over-pruning here and in a few other places]