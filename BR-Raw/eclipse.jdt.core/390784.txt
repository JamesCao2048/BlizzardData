Bug 390784 – [1.8][compiler] Redesign ECJ grammar for type annotations support - JSR 308
BETA_JAVA8:
While working on adding support for type annotations on nested qualified
type names (bug 383596), it has become clear that the existing grammar
changes done for 308 support are too complicated to work with and problem
prone.
This bug will be used to document/track a brand new design that has
been prototyped that is very clean, elegant and orders of magnitude
simpler.
Basically, type annotations are recognized as type annotations in some
places in the present grammar and as modifiers in other places to satisfy
the parser generator's requirement on the LALR(1)'ness of the input grammar.
As a result,
-  If we stack type annotations purely in the expression stack as we
do for Java SE5 annotations, they get interspersed with other expressions
and some of the code is not prepared to handle such interleaving and will
look ugly if changed.
Maintaining type annotations in a separate stack
altogether was not possible with the present design since they are
recognized as modifiers in certain parts of the grammar - So type
annotations end  up in the expression stack at times and in type
annotation stack at others.
This greatly complicates the decoration of
AST nodes in a clean and consistent fashion - leading to a lot of
code clutter.
- Signalling the absence of type annotations becomes very difficult in
some places in the grammar: We need a non-terminal that reduces to epsilon
so we can attach a semantic action method to the production to push zero
on the type annotation length stack, but empty productions can and do trigger
various conflicts when placed in the "right" location.
This forces us to
place them on occasions well after where they should be - sometimes well
after other annotations are encountered.
This causes us to violate the
stack protocol by having to push at locations other than the top of stack:
basically unstack various items, push and restack - not a happy situation.
- In those locations where type annotations are recognized as modifiers,
the language accepted by the parser is no longer conformant and call for
constraining downstream by pruning the illegal programs (see bug 385293).
This problem is not a blocker in itself and is also integral to the
alternate solution that has been prototyped, but is present only in a
very non-virulent form in the new design (modifiers are not stacked,
need to be retrieved before they evaporate  - see https://bugs.eclipse.org/bugs/show_bug.cgi?id=385293#c4).
The new design starts with simple modifications to allow type annotations
*at the grammar level* before *any* type production in the grammar.
Starting
from the observation that any type reference in Java must start
with either a primitive type or a simple name, we can now proceed by
tweaking the relevant productions (shown somewhat simplistically, but
materially truthfully):
PrimitiveType ::= TypeAnnotationsopt PrimitiveType
Name ::= TypeAnnotationsopt SimpleName
Name -> TypeAnnotationsopt QualifiedName
QualifiedName ::= Name '.' TypeAnnotationsopt SimpleName
Since *all* other productions that describe various flavors of type
(ClassType, InterfaceType, ClassOrInterfaceType, ClassOrInterface,
GenericType, ArrayType ...) are composed of PrimiveTypes and Names
these simple rules automatically ensure that *every use of a type*
can be annotated with JSR308 style annotations without wholesale
changes all over the place.
Two details need mention:
(1) The specifications forbids type annotations in some places - in those
places the grammar would be seen to be too permissive - these cases are
handled straighforwardly by rejecting the annotations if present in the
AST construction phase.
(2) Such a change would make JSR308 annotations permissible at places
where SE5 annotations are acceptable - In the design this is handled
by feedback from the parser to the scanner using the machinery put in
place for JSR335 support (See bug 380194 and bug 385009) so that in
places where SE5 annotations are legal, the scanner is able to discriminate
and scan and hand out a SE5 annotation to the parser.
Patch to follow shortly.