Bug 383110 – [quick assist] Issues in "Convert 'if-else' to 'switch'" on String, Enum, and boxed types
Follow-up to bug 348179.
I see 2 issues with the latest code:
1.
The two 'switch' <=> 'if-else' quick assists are not inverse operations.
If you start with this code:
void foo(String arg) {
if ("a".equals(arg)) {
System.out.println(1);
} else if ("b".equals(arg)) {
System.out.println(2);
} else {
System.out.println("else");
}
System.out.println("after");
}
...
and then apply the two conversion quick assists, then you end up with:
void foo(String arg) {
if (arg == null) {
System.out.println("else");
} else {
if ("a".equals(arg)) {
System.out.println(1);
} else if ("b".equals(arg)) {
System.out.println(2);
} else {
System.out.println("else");
}
}
System.out.println("after");
}
We currently treat arg == null specially for 'if-else' => 'switch' to avoid an NPE, but we don't do the same for 'switch' => 'if-else' where we silently hide an NPE (see bug 347792 comment 8 about the 'silently').
I think we should have main quick assists that don't care about NPE, and a (less relevant) variant of each that does care, i.e.:
-------------------------------------------------------------
- "Convert 'if-else' to 'switch'"
=> does not generate "if (arg == null) ...
- "Convert 'if-else' to 'switch' (handle arg == null)"
=> generates "if (arg == null) ..."
-------------------------------------------------------------
- "Convert 'switch' to 'if-else'"
=> uses "if ("a".equals(arg))" and removes potential NPE
- "Convert 'switch' to 'if-else' (keep NPE if arg == null)"
=> uses "if (arg.equals("a"))" to preserve NPE
-------------------------------------------------------------
2.
There's a bug in the logic that determines whether "if (arg == null)" needs to be added.
The original example above does generate "if (arg == null)", but when you remove the last else branch, then the null check is not added and the resulting code throws an NPE.